"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7211],{5632:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"docusaurus-docs","metadata":{"permalink":"/gpt4api/blog/docusaurus-docs","editUrl":"https://github.com/tailorvj/gpt4api/tree/main/docs/docs/blog/2023-08-15-docusaurus-docs.md","source":"@site/blog/2023-08-15-docusaurus-docs.md","title":"Docusaurus Docs","description":"I added a docs folder to the root of the project and added a docusaurus project inside it.","date":"2023-08-15T00:00:00.000Z","formattedDate":"August 15, 2023","tags":[{"label":"github","permalink":"/gpt4api/blog/tags/github"},{"label":"gh-pages","permalink":"/gpt4api/blog/tags/gh-pages"},{"label":"pages","permalink":"/gpt4api/blog/tags/pages"},{"label":"devops","permalink":"/gpt4api/blog/tags/devops"},{"label":"tools","permalink":"/gpt4api/blog/tags/tools"},{"label":"documentations","permalink":"/gpt4api/blog/tags/documentations"},{"label":"docs","permalink":"/gpt4api/blog/tags/docs"},{"label":"docusaurus","permalink":"/gpt4api/blog/tags/docusaurus"}],"readingTime":1.485,"hasTruncateMarker":true,"authors":[{"name":"Tailor VJ","title":"Maintainer of GPT4API","url":"https://github.com/tailorvj","imageURL":"https://github.com/tailorvj.png","key":"tailorvj"}],"frontMatter":{"slug":"docusaurus-docs","title":"Docusaurus Docs","authors":"tailorvj","tags":["github","gh-pages","pages","devops","tools","documentations","docs","docusaurus"]},"nextItem":{"title":"First Working Solution","permalink":"/gpt4api/blog/first-working-solution"}},"content":"I added a docs folder to the root of the project and added a docusaurus project inside it.\\n\\nI moved the node.js API code to the api folder.\\n\\n\x3c!--truncate--\x3e\\n\\n## Docusaurus Docs - An open-source static site builder for documentation\\n\\n*Tue 15 Aug*\\n\\nI added a docs folder to the root of the project and added a docusaurus project inside it.\\n\\nI moved the node.js API code to the api folder.\\n\\n### Publishing docs to GitHub Pages\\n\\nThe project is organized as follows:\\n\\n* `api/src/`: contains the source code of the API\\n* `docs/`: contains the source for this website\\n\\nThe gh-pages branch contains the built website (this website).\\n\\nThe project includes the gh-pages npm package, which is used to deploy the website to GitHub Pages.\\n\\nIn order to work on the documentation, you edit the docs files and run the website locally.\\nOnce the changes are ready, you build the website and push it to the gh-pages branch to deploy it.\\n\\nThere is a package.json file in the root of the project, which contains scripts to run the website locally and to build it.\\n\\nIt also contains a custom script to deploy the website to GitHub Pages.\\n\\n```bash\\n$ npm run deploygh\\n```\\n\\n## Start your docs site locally\\n\\nRun the development server:\\n\\n```bash\\n$ cd docs\\n$ npm run start\\n```\\n\\nThe `cd` command changes the directory you\'re working with. In order to work with your newly created Docusaurus site, you\'ll need to navigate the terminal there.\\n\\nThe `npm run start` command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/ (or another port, if 3000 is already in use).\\n\\nOpen `docs/intro.md` (this page) and edit some lines: the site **reloads automatically** and displays your changes."},{"id":"first-working-solution","metadata":{"permalink":"/gpt4api/blog/first-working-solution","editUrl":"https://github.com/tailorvj/gpt4api/tree/main/docs/docs/blog/2023-08-15-first-working-solution.md","source":"@site/blog/2023-08-15-first-working-solution.md","title":"First Working Solution","description":"I built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value.","date":"2023-08-15T00:00:00.000Z","formattedDate":"August 15, 2023","tags":[{"label":"nodejs","permalink":"/gpt4api/blog/tags/nodejs"},{"label":"chatgpt","permalink":"/gpt4api/blog/tags/chatgpt"},{"label":"openai","permalink":"/gpt4api/blog/tags/openai"},{"label":"api","permalink":"/gpt4api/blog/tags/api"},{"label":"poc","permalink":"/gpt4api/blog/tags/poc"},{"label":"commit","permalink":"/gpt4api/blog/tags/commit"}],"readingTime":4.77,"hasTruncateMarker":true,"authors":[{"name":"Tailor VJ","title":"Maintainer of GPT4API","url":"https://github.com/tailorvj","imageURL":"https://github.com/tailorvj.png","key":"tailorvj"}],"frontMatter":{"slug":"first-working-solution","title":"First Working Solution","authors":"tailorvj","tags":["nodejs","chatgpt","openai","api","poc","commit"]},"prevItem":{"title":"Docusaurus Docs","permalink":"/gpt4api/blog/docusaurus-docs"}},"content":"I built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value.\\n\\n\x3c!--truncate--\x3e\\n\\n## First step - Proof of concept - Connecting to OpenAI GPT-4 API\\n\\n*Tue 15 Aug*\\n\\nI built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value.\\n\\n### The bare minimum implementation\\n\\n1. OpenAI API Key. In order to use the OpenAI GPT-4 API, you need an API key, so sign up and get your API key from here: https://platform.openai.com/account/api-keys\\n2. We are building a basic node.js Express server that communicates with the OpenAI API and reads the API key from an environment variable. So the project was initialised with the following npm commands:\\n\\n```bash\\n$ npm init -y\\n$ npm install --save express openai body-parser dotenv\\n```\\n\\n3. The main entry point for our server is index.js\\n   I installed nodemon globally so I can run the server with the following command:\\n\\n   $ nodemon index.js\\n   Then I added a script to package.json so I can run the server with npm:\\n\\n```yaml\\n  \\"scripts\\": {\\n    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",\\n    \\"startdev\\": \\"nodemon index.js\\"\\n  },\\n```\\n\\nSo, now I can run the server with:\\n\\n```bash\\n   $ npm run startdev\\n```\\n\\nAnd it will restart automatically when I make changes to the code.\\n4. Environment variables: .env includes OPENAI_API_KEY and ./prompts/recipe.txt includes the system prompt.\\n5. The service: ./services/recipeService.js includes the code that connects to the OpenAI GPT-4 API and returns the response.\\n6. The router: ./routers/recipeRouter.js includes the code that defines the endpoint. At this stage, we are defining a POST endpoint that accept Content-Type application/json, receives a dishName parameter in the body in the following format:\\n\\n```json\\n{\\n  \\"dishName\\": \\"Spaghetti Carbonara\\"\\n}\\n```\\n\\n7. That\'s it! Let\'s start looking into the basic code that makes this work.\\n\\n### The code\\n\\nLet\'s start from the end.\\n\\n#### services/recipeService.js\\n\\n**Setup**:\\n\\n```javascript\\n\\nconstfs=require(\\"fs\\");\\nconst { Configuration, OpenAIApi } =require(\\"openai\\");\\nrequire(\\"dotenv\\").config();\\n\\nconstconfiguration=newConfiguration({\\napiKey:process.env.OPENAI_API_KEY,\\n});\\n\\nconstopenai=newOpenAIApi(configuration);\\n```\\n\\n**The function that connects to the OpenAI API**:\\n\\n```javascript\\n\\nexports.generateRecipe=async (dishName) => {\\n  // implementation here. Details below\\n}\\n\\n```\\n\\nInside the function, we **read the system prompt from the recipe.txt file**:\\n\\n```javascript\\nconstsystemPrompt=fs.readFileSync(\\"./prompts/recipe.txt\\", \\"utf8\\");\\n```\\n\\nNext, we **call the OpenAI API**:\\n\\n```javascript\\nconstresponse=awaitopenai.createChatCompletion({\\nmodel:\\"gpt-4\\",\\n\\nmessages: [\\n      {\\nrole:\\"system\\",\\ncontent:systemPrompt,\\n      },\\n      {\\nrole:\\"user\\",\\ncontent:`Dish name: ${dishName}`,\\n      },\\n    ],\\n\\ntemperature:0.1,\\nmax_tokens:256,\\ntop_p:1,\\nfrequency_penalty:0,\\npresence_penalty:0,\\n  });\\n\\nreturn response.data;\\n```\\n\\n#### routers/recipeRouter.js\\n\\n**Setup**:\\n\\n```javascript\\nconst express = require(\\"express\\");\\nconst router = express.Router();\\nconst recipeService = require(\\"../services/recipeService\\");\\n```\\n\\n**The endpoint**:\\n\\n```javascript\\nrouter.post(\\"/generateRecipe\\", async (req, res) => {\\n  try {\\n    const dishName = req.body.dishName;\\n    const response = await recipeService.generateRecipe(dishName);\\n    res.status(200).send(response);\\n  } catch (error) {\\n    res.status(500).send(error);\\n  }\\n});\\n```\\n\\nWhat\'s happening in that router.post definition?\\n\\n1. We are defining a POST endpoint with the path /generateRecipe\\n2. We are using the async/await syntax to call the recipeService.generateRecipe function\\n3. We are sending the response back to the client with res.status(200).send(response)\\n\\n**And last but not least, export the module:**\\n\\n```javascript\\nmodule.exports = router;\\n```\\n\\n#### index.js\\n\\n**Setup**:\\n\\n```javascript\\nconst express = require(\\"express\\");\\nconst bodyParser = require(\\"body-parser\\");\\nconst recipeRouter = require(\\"./routers/recipeRouter\\");\\n\\n// Create an Express app\\nconst app = express();\\n\\n// Use JSON middleware to automatically parse JSON\\napp.use(bodyParser.json());\\n```\\n\\n**The endpoint**:\\n\\n```javascript\\n// Register the recipe router\\napp.use(\\"/api/recipe\\", recipeRouter);\\n```\\n\\n**Start the server**:\\n\\n```javascript\\n// Start the server on port 3003\\nconst PORT = process.env.PORT || 3003;\\napp.listen(PORT, () => {\\n  console.log(`Server is running on port ${PORT}`);\\n});\\n```\\n\\n### prompt/recipe.txt - The system prompt\\n\\nYou are an nutritional expert. I am going to provide you with food recipes. Please reply with an analysis of the nutritinal values and dietary information related to the food recipe I ask you about.\\n\\n### Testing with Postman\\n\\n1. Open Postman and add a new request of type POST\\n2. The development server has been defined to listen on port 3003, so the URL should be http://localhost:3003/api/recipe/generateRecipe\\n3. Add the following header: Content-Type: application/json (Content type is the header name and application/json is the value)\\n4. Add the following Body in raw format:\\n\\n   ```json\\n   {\\n     \\"dishName\\": \\"Spaghetti Carbonara\\"\\n   }\\n   ```\\n\\n5. Send the request and you should get a response from the OpenAI API with the analysis of the nutritinal values and dietary information related to the food recipe you asked about.\\n\\n6. If you get a 401 error, it usually means something is wrong with your API key. \\n\\n### Next steps - \\n\\nWe are going to create a more general purpose solution that would allow the creation of multiple endpoints and multiple system prompts.\\n\\n#### Ideas from co-pilot. Some are actually good!\\n\\n1. Add more endpoints to the router\\n2. Add more system prompts to the recipe.txt file\\n3. Add more parameters to the request body\\n4. Add more parameters to the OpenAI API call\\n5. Add more error handling\\n6. Add more tests\\n7. Add more comments to the code\\n8. Add more documentation\\n9. Add more logging\\n10. Add more security\\n11. Add more performance optimisations\\n12. Add more scalability\\n13. Add more monitoring\\n14. Add more CI/CD\\n15. Add more automation\\n16. Add more infrastructure as code\\n17. Add more cloud\\n18. Add more containers\\n19. Add more Kubernetes\\n20. Add more serverless\\n21. Add more machine learning\\n22. Add more AI\\n23. Add more blockchain\\n24. Add more IoT\\n25. Add more AR/VR\\n26. Add more quantum computing\\n27. Add more space\\n28. Add more time\\n29. Add more dimensions\\n30. Add more universes\\n31. Add more multiverses\\n32. Add more infiniteverses\\n33. Add more infiniteverses\\n34. Add more infiniteverses\\n35. Add more infiniteverses\\n36. Add more infiniteverses\\n37. Add more :D"}]}')}}]);