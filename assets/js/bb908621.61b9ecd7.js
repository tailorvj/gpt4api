"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1654],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={slug:"first-working-solution",title:"First Working Solution",authors:"tailorvj",tags:["nodejs","chatgpt","openai","api","poc","commit"]},i=void 0,p={permalink:"/gpt4api/blog/first-working-solution",editUrl:"https://github.com/tailorvj/gpt4api/tree/main/docs/docs/blog/2023-08-15-first-working-solution.md",source:"@site/blog/2023-08-15-first-working-solution.md",title:"First Working Solution",description:"I built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value.",date:"2023-08-15T00:00:00.000Z",formattedDate:"August 15, 2023",tags:[{label:"nodejs",permalink:"/gpt4api/blog/tags/nodejs"},{label:"chatgpt",permalink:"/gpt4api/blog/tags/chatgpt"},{label:"openai",permalink:"/gpt4api/blog/tags/openai"},{label:"api",permalink:"/gpt4api/blog/tags/api"},{label:"poc",permalink:"/gpt4api/blog/tags/poc"},{label:"commit",permalink:"/gpt4api/blog/tags/commit"}],readingTime:4.77,hasTruncateMarker:!0,authors:[{name:"Tailor VJ",title:"Maintainer of GPT4API",url:"https://github.com/tailorvj",imageURL:"https://github.com/tailorvj.png",key:"tailorvj"}],frontMatter:{slug:"first-working-solution",title:"First Working Solution",authors:"tailorvj",tags:["nodejs","chatgpt","openai","api","poc","commit"]},prevItem:{title:"Docusaurus Docs",permalink:"/gpt4api/blog/docusaurus-docs"}},s={authorsImageUrls:[void 0]},l=[{value:"First step - Proof of concept - Connecting to OpenAI GPT-4 API",id:"first-step---proof-of-concept---connecting-to-openai-gpt-4-api",level:2},{value:"The bare minimum implementation",id:"the-bare-minimum-implementation",level:3},{value:"The code",id:"the-code",level:3},{value:"services/recipeService.js",id:"servicesrecipeservicejs",level:4},{value:"routers/recipeRouter.js",id:"routersreciperouterjs",level:4},{value:"index.js",id:"indexjs",level:4},{value:"prompt/recipe.txt - The system prompt",id:"promptrecipetxt---the-system-prompt",level:3},{value:"Testing with Postman",id:"testing-with-postman",level:3},{value:"Next steps -",id:"next-steps--",level:3},{value:"Ideas from co-pilot. Some are actually good!",id:"ideas-from-co-pilot-some-are-actually-good",level:4}],m={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"I built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value."),(0,a.kt)("h2",{id:"first-step---proof-of-concept---connecting-to-openai-gpt-4-api"},"First step - Proof of concept - Connecting to OpenAI GPT-4 API"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Tue 15 Aug")),(0,a.kt)("p",null,"I built a very basic endpoint POC that gets a dish name and returns an analysis from OpenAI GPT-4 API about the ingredients and their nutritinal value."),(0,a.kt)("h3",{id:"the-bare-minimum-implementation"},"The bare minimum implementation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"OpenAI API Key. In order to use the OpenAI GPT-4 API, you need an API key, so sign up and get your API key from here: ",(0,a.kt)("a",{parentName:"li",href:"https://platform.openai.com/account/api-keys"},"https://platform.openai.com/account/api-keys")),(0,a.kt)("li",{parentName:"ol"},"We are building a basic node.js Express server that communicates with the OpenAI API and reads the API key from an environment variable. So the project was initialised with the following npm commands:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm init -y\n$ npm install --save express openai body-parser dotenv\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The main entry point for our server is index.js\nI installed nodemon globally so I can run the server with the following command:"),(0,a.kt)("p",{parentName:"li"},"$ nodemon index.js\nThen I added a script to package.json so I can run the server with npm:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "startdev": "nodemon index.js"\n  },\n')),(0,a.kt)("p",null,"So, now I can run the server with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"   $ npm run startdev\n")),(0,a.kt)("p",null,"And it will restart automatically when I make changes to the code.\n4. Environment variables: .env includes OPENAI_API_KEY and ./prompts/recipe.txt includes the system prompt.\n5. The service: ./services/recipeService.js includes the code that connects to the OpenAI GPT-4 API and returns the response.\n6. The router: ./routers/recipeRouter.js includes the code that defines the endpoint. At this stage, we are defining a POST endpoint that accept Content-Type application/json, receives a dishName parameter in the body in the following format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dishName": "Spaghetti Carbonara"\n}\n')),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"That's it! Let's start looking into the basic code that makes this work.")),(0,a.kt)("h3",{id:"the-code"},"The code"),(0,a.kt)("p",null,"Let's start from the end."),(0,a.kt)("h4",{id:"servicesrecipeservicejs"},"services/recipeService.js"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Setup"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\nconstfs=require("fs");\nconst { Configuration, OpenAIApi } =require("openai");\nrequire("dotenv").config();\n\nconstconfiguration=newConfiguration({\napiKey:process.env.OPENAI_API_KEY,\n});\n\nconstopenai=newOpenAIApi(configuration);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The function that connects to the OpenAI API"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"\nexports.generateRecipe=async (dishName) => {\n  // implementation here. Details below\n}\n\n")),(0,a.kt)("p",null,"Inside the function, we ",(0,a.kt)("strong",{parentName:"p"},"read the system prompt from the recipe.txt file"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'constsystemPrompt=fs.readFileSync("./prompts/recipe.txt", "utf8");\n')),(0,a.kt)("p",null,"Next, we ",(0,a.kt)("strong",{parentName:"p"},"call the OpenAI API"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'constresponse=awaitopenai.createChatCompletion({\nmodel:"gpt-4",\n\nmessages: [\n      {\nrole:"system",\ncontent:systemPrompt,\n      },\n      {\nrole:"user",\ncontent:`Dish name: ${dishName}`,\n      },\n    ],\n\ntemperature:0.1,\nmax_tokens:256,\ntop_p:1,\nfrequency_penalty:0,\npresence_penalty:0,\n  });\n\nreturn response.data;\n')),(0,a.kt)("h4",{id:"routersreciperouterjs"},"routers/recipeRouter.js"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Setup"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst router = express.Router();\nconst recipeService = require("../services/recipeService");\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The endpoint"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'router.post("/generateRecipe", async (req, res) => {\n  try {\n    const dishName = req.body.dishName;\n    const response = await recipeService.generateRecipe(dishName);\n    res.status(200).send(response);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n')),(0,a.kt)("p",null,"What's happening in that router.post definition?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We are defining a POST endpoint with the path /generateRecipe"),(0,a.kt)("li",{parentName:"ol"},"We are using the async/await syntax to call the recipeService.generateRecipe function"),(0,a.kt)("li",{parentName:"ol"},"We are sending the response back to the client with res.status(200).send(response)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"And last but not least, export the module:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = router;\n")),(0,a.kt)("h4",{id:"indexjs"},"index.js"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Setup"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst bodyParser = require("body-parser");\nconst recipeRouter = require("./routers/recipeRouter");\n\n// Create an Express app\nconst app = express();\n\n// Use JSON middleware to automatically parse JSON\napp.use(bodyParser.json());\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The endpoint"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Register the recipe router\napp.use("/api/recipe", recipeRouter);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Start the server"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Start the server on port 3003\nconst PORT = process.env.PORT || 3003;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n")),(0,a.kt)("h3",{id:"promptrecipetxt---the-system-prompt"},"prompt/recipe.txt - The system prompt"),(0,a.kt)("p",null,"You are an nutritional expert. I am going to provide you with food recipes. Please reply with an analysis of the nutritinal values and dietary information related to the food recipe I ask you about."),(0,a.kt)("h3",{id:"testing-with-postman"},"Testing with Postman"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Open Postman and add a new request of type POST")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The development server has been defined to listen on port 3003, so the URL should be http://localhost:3003/api/recipe/generateRecipe")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the following header: Content-Type: application/json (Content type is the header name and application/json is the value)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the following Body in raw format:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dishName": "Spaghetti Carbonara"\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Send the request and you should get a response from the OpenAI API with the analysis of the nutritinal values and dietary information related to the food recipe you asked about.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If you get a 401 error, it usually means something is wrong with your API key. "))),(0,a.kt)("h3",{id:"next-steps--"},"Next steps -"),(0,a.kt)("p",null,"We are going to create a more general purpose solution that would allow the creation of multiple endpoints and multiple system prompts."),(0,a.kt)("h4",{id:"ideas-from-co-pilot-some-are-actually-good"},"Ideas from co-pilot. Some are actually good!"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add more endpoints to the router"),(0,a.kt)("li",{parentName:"ol"},"Add more system prompts to the recipe.txt file"),(0,a.kt)("li",{parentName:"ol"},"Add more parameters to the request body"),(0,a.kt)("li",{parentName:"ol"},"Add more parameters to the OpenAI API call"),(0,a.kt)("li",{parentName:"ol"},"Add more error handling"),(0,a.kt)("li",{parentName:"ol"},"Add more tests"),(0,a.kt)("li",{parentName:"ol"},"Add more comments to the code"),(0,a.kt)("li",{parentName:"ol"},"Add more documentation"),(0,a.kt)("li",{parentName:"ol"},"Add more logging"),(0,a.kt)("li",{parentName:"ol"},"Add more security"),(0,a.kt)("li",{parentName:"ol"},"Add more performance optimisations"),(0,a.kt)("li",{parentName:"ol"},"Add more scalability"),(0,a.kt)("li",{parentName:"ol"},"Add more monitoring"),(0,a.kt)("li",{parentName:"ol"},"Add more CI/CD"),(0,a.kt)("li",{parentName:"ol"},"Add more automation"),(0,a.kt)("li",{parentName:"ol"},"Add more infrastructure as code"),(0,a.kt)("li",{parentName:"ol"},"Add more cloud"),(0,a.kt)("li",{parentName:"ol"},"Add more containers"),(0,a.kt)("li",{parentName:"ol"},"Add more Kubernetes"),(0,a.kt)("li",{parentName:"ol"},"Add more serverless"),(0,a.kt)("li",{parentName:"ol"},"Add more machine learning"),(0,a.kt)("li",{parentName:"ol"},"Add more AI"),(0,a.kt)("li",{parentName:"ol"},"Add more blockchain"),(0,a.kt)("li",{parentName:"ol"},"Add more IoT"),(0,a.kt)("li",{parentName:"ol"},"Add more AR/VR"),(0,a.kt)("li",{parentName:"ol"},"Add more quantum computing"),(0,a.kt)("li",{parentName:"ol"},"Add more space"),(0,a.kt)("li",{parentName:"ol"},"Add more time"),(0,a.kt)("li",{parentName:"ol"},"Add more dimensions"),(0,a.kt)("li",{parentName:"ol"},"Add more universes"),(0,a.kt)("li",{parentName:"ol"},"Add more multiverses"),(0,a.kt)("li",{parentName:"ol"},"Add more infiniteverses"),(0,a.kt)("li",{parentName:"ol"},"Add more infiniteverses"),(0,a.kt)("li",{parentName:"ol"},"Add more infiniteverses"),(0,a.kt)("li",{parentName:"ol"},"Add more infiniteverses"),(0,a.kt)("li",{parentName:"ol"},"Add more infiniteverses"),(0,a.kt)("li",{parentName:"ol"},"Add more :D")))}d.isMDXComponent=!0}}]);